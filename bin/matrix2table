#!/usr/bin/perl

# matrix2table.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-18-2021


# SYNOPSIS:
# Converts an NxM matrix into a 3-column table with a user-defined delimiter
# Does not require row and/or col names, will auto-substitute the element index

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################


use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns;
my $rns;
my $sep;


sub usage {
	my $usage = "matrix2table.pl\n
	PURPOSE: Converts an NxM matrix into a 3-column table with a user-defined delimiter
	\n
	USAGE:	matrix2table.pl -i matrix.tab -o output -c 1 -r 1 -s \t
	-i		input matrix file in TAB format.
	-o 		output file name ( do not include extensions! )
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

##################################################################################
# Read the input data file, expecting a tabular matrix with headers and columns
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Open the output filehand
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Initialize vectors for rownames
my @rownames;
my @colnames;

# Read the data
my @M;
my $c = 0;
while ( <$fh> )		{
	chomp $_;
	
	# If we have column headers, just print our singple header
	if ( $cns == 1 && $. == 1 )	{
		@colnames = split("$sep", $_);
		next;
	}
	
	# Now operate on the rows
	my @row = split("$sep", $_);
	if ( $rns == 1 )	{
		my $rowname = shift @row;
		push @rownames, $rowname;
	}
	push @M, \@row;
	$c++;
}
close $fh if ( $succin );

# Set defaults if we dont have rownames or column names
# Here the placeholders are just the element in the order that it appears in the input data
if ( $cns == 0 || scalar @colnames == 0 )	{
	for ( my $i=0; $i < $c; $i++ )	{
		$colnames[$i] = $i + 1;
	}
}
if ( $rns == 0 ) 	{
	for ( my $i = 0; $i < scalar @M; $i++ )	{
		$rownames[$i] = $i + 1;
	}
}

##################################################################################
# Reformat to the table output 
print $fhout join("$sep", "GroupA", "GroupB", "Value"), "\n" if ( $cns == 1 );
for ( my $i=0; $i < scalar @rownames; $i++ )	{
	for ( my $j=0; $j < scalar @colnames; $j++ )	{
		print $fhout join("$sep", $rownames[$i], $colnames[$j], $M[$i]->[$j]), "\n";
	}
}
close $fhout if ( $succout );
exit;
