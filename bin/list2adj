#!/usr/bin/perl

# list2adj.pl v0.1.0
# Author: MH Seabolt

# SYNOPSIS:
# Convert a "list" file wiht at least 2 columns (e.g. an adjacency list) to a full adjacency matrix.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 0;
my $rns = 0;
my $isep;
my $osep;

sub usage {
	my $usage = "list2adj.pl\n
	PURPOSE: Convert a \"list\" file wiht at least 2 columns (e.g. an adjacency list) to a full adjacency matrix.
			By default, the parent vertex is the first element in the adjacency list data.
			Edges are directed and given a value of 1.
	\n
	USAGE:	list2adj.pl -i csv.list -v 5 -o data.list
	-i		input matrix file
	-c 		INT flag; matrix contains column headers? ( Default: OFF )
	-r 		INT flag; matrix contains row names? ( Default: OFF )
	-o 		output file name
	-si 	STR; input data separator ( Default: tab )
	-so 	STR; output data separator ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'ncols|c=i' => \$cns,
			'nrows|r=i' => \$rns,
			'isep|si=s' => \$isep,
			'osep|so=s' => \$osep,
) or die usage();

# Parameter setups
$cns = ( $cns == 1 )? 1 : 0;
$rns = ( $rns == 1 )? 1 : 0;
$isep = ( $isep && $isep ne "\t" )? $isep : "\t";
$osep = ( $osep && $osep ne "\t" )? $osep : "\t";

##################################################################################
# Read the input data file, expecting a matrix with headers and columns
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin );

# Loop over the lines of the incoming data
my %G = ();
my %Vertices = ();
my @rownames;
while ( <$fh> )		{
	chomp $_;
	
	# If we have column headers, go ahead and print those
	if ( $cns == 1 && $. == 1 )		{
		next;
	}
	
	# Now operate element-wise over the rows and print
	my @row = split("$isep", $_);
	my $parent = shift @row;
	$Vertices{$parent} = 1;
	for ( my $i=0; $i < scalar @row; $i++ )		{
		$G{$parent}{$row[$i]} = 1;
	}
}
close $fh if ( $succin );

##################################################################################
# Set output filehandles
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;			}
else				{	$fhout = *STDOUT;		}

# Loop over %G keys and set any missing values to 0
my @keys = sort keys %Vertices;
print $fhout join("$osep", @keys), "\n";
foreach my $parent ( @keys )		{
	my @row;
	foreach my $child ( @keys )		{
		$G{$parent}{$child} = 0 if ( not exists $G{$parent}{$child} );
		push @row, $G{$parent}{$child};
	}
	print $fhout join("$osep", $parent, @row), "\n";
}
close $fhout if ( $succout );

exit;