#!/usr/bin/perl

# gini.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Calculates the Gini Index, a measure of the evenness of dispersion, for data in an input numeric matrix, either by row (default) or cumulatively.
# The Gini Index spans from 0 (perfectly uniform distance between data points) and 1 (total randomness, no trend).

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $method;

sub usage {
	my $usage = "gini.pl v0.1.0\n
	PURPOSE: Calculates the Gini Index, a measure of the evenness of dispersion, for data in an input numeric matrix, either by row (default) or cumulatively.
			The Gini Index spans from 0 (perfectly uniform distance between data points) and 1 (total randomness, no trend).

	\n
	USAGE:	gini.pl v0.1.0 -i data.tab -o gini.tab
	-i		input numeric data matrix
	-o 		output file name 
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
	-m 		STR; method to calculate statistics (either row [Default] or cumulative).
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'method|m=s' => \$method,
) or die usage();

# Parameter setups
$cns = ( $cns == 0 )? 0 : 1;
$rns = ( $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";
$method = ( $method && $method =~ /(?im)cum/ )? "cumulative" : "row";

##################################################################################
# Read the first input data file
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Print the appropriate header(s) if we are using them
if ( $cns == 1 )	{	print $fhout "gini\n";		}

##################################################################################
# Operate on the matrix line-by-line (here we are skipping column headers and rownames, if they are marked as being present
my @P;
while ( <$fh> )		{
	chomp $_;
	if ( $cns == 1 && $. == 1 )		{
		@colnames = split("$sep", $_);
		next;
	}
	my @row = split("$sep", $_);
	my $rowname;
	if ( $rns == 1 )	{
		$rowname = shift @row;
		push @rownames, $rowname;
	}

	# Compute the descriptive statistics
	if ( $method ne "cumulative" )	{
		if ( $rns == 1 )	{ 	print $fhout join("$sep", $rowname, gini(@row)), "\n";		}
		else 				{	print $fhout gini(@row), "\n";								}
	}
	else 	{
		push @P, $_ foreach (@row);
	}
}
close $fh if ( $succin );

##################################################################################
# If the user requested the cumulative method
if ( $method eq "cumulative" )	{
	if ( $rns == 1 )	{ 	print $fhout join("$sep", "Cumulative", gini(@P)), "\n";		}
	else 				{	print $fhout gini(@P), "\n";								}
}
close $fhout if ( $succout );

exit;

############################# SUBROUTINES ###########################################

# Calculates the Gini coefficient from a 1D list of non-negative, ascending sorted numbers
# The index ranges from 0 to 1, with values approaching 1 indicating increasing unevenness (we want a value close to 0)
sub gini		{
	my ( @distances ) = @_;
	@distances = sort { $a <=> $b } @distances;
	my $n = scalar @distances;
	my $sum = sum( @distances );
	my $gini_index;
	for ( my $i=0; $i < $n; $i++ )	{
		$gini_index += ((2*($i  +1) - $n - 1) * $distances[$i]) / ($n * $sum);
	}
	return $gini_index;
}

# Computes a sum
sub sum		{
	my ( @list ) = @_;
	my $sum = 0;
	$sum += $_ foreach ( @list );
	return $sum;
}