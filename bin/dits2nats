#!/usr/bin/perl

# dits2nats.pl v0.1.0
# Author: MH Seabolt

# SYNOPSIS:
# Converts each element in a numeric matrix (assumed to be in units of dits/hartleys/log10) to the equivalent value in units of nats (aka natural log).

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Scalar::Util qw(looks_like_number);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;

sub usage {
	my $usage = "dits2nats.pl\n
	PURPOSE: Converts each element in a numeric matrix (assumed to be in units of dits/hartleys/log10) to the equivalent value in units of nats (aka natural log).
	\n
	USAGE:	dits2nats.pl -i input.dits.tab -o nats.tab
	-i		input matrix file
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-o 		output file name
	-s 		STR; input data separator ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'ncols|c=i' => \$cns,
			'nrows|r=i' => \$rns,
			'sep|s=s' => \$sep,
) or die usage();

# Parameter setups
$cns = ( $cns == 0 )? 0 : 1;
$rns = ( $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

my $e = 2.7182818284;

##################################################################################
# Read the input data file, expecting a matrix with headers and columns
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Set output filehandles
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;			}
else				{	$fhout = *STDOUT;		}

# Loop over the lines of the incoming data
while ( <$fh> )		{
	chomp $_;
	
	# If we have column headers, go ahead and print those
	if ( $cns == 1 && $. == 1 )		{
		print $fhout "$_\n";
		next;
	}
	
	# Now operate element-wise over the rows and print
	my @row = split("$sep", $_);
	my $rowname = shift @row if ( $rns == 1 );
	foreach (@row)	{
		if ( looks_like_number($_) )		{	$_ /= logX($e,10); 	}
	}
	if ( $rns == 1 )	{	print $fhout "$rowname$sep", join("$sep", @row), "\n";		}
	else				{	print $fhout join("$sep", @row), "\n";						}

}
close $fh if ( $succin );
close $fhout if ( $succout );

exit;

######################### SUBROUTINES #############################

sub logX	{
	my ( $operand, $base ) = @_;
	if ( $base eq "e" )		{		( $operand == 0 )? return "nan" : return log($operand);						}
	else					{		( $operand == 0 )? return "nan" : return log($operand) / log($base);		}
}