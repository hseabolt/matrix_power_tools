#!/usr/bin/perl

# power_set.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-18-2021

# SYNOPSIS
# Computes the power set of an input Set (can be a MultiSet)
# Output is in "list" format, one element per line for all unique elements in the resulting power set.
# Use the -multiset flag to compute the power set if you want to treat the input Set as a Bag/Multiset.
# WARNING: Any headers should be removed prior to passing incoming data to this script. 

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings; no warnings 'once';
use Getopt::Long qw(GetOptions);
use List::Util qw(reduce);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $multiset = 0;

sub usage {
	my $usage = "power_set.pl v0.1.0\n
				PURPOSE: Computes the power set of an input Set (can be a MultiSet)
						Output is in \"list\" format, one element per line for all unique elements in the resulting power set.
						Use the -multiset flag to compute the power set if you want to treat the input Set as a Bag/Multiset.
						WARNING: Any headers should be removed prior to passing incoming data to this script. 
				
				Notes: 
				- The output of this script includes the Empty Set, denoted as ()
	\n
	USAGE:	power_set.pl v0.1.0 -A setA -B setB -o power_set.list
	-A		input set A (can be piped in from STDIN)
	-B		input set B to intersect with set A.  
	-o 		output file name
	-s 		STR; input data separator. ( Default: tab )
	-m 		(Optional) INT flag; treat the input Set as a MultiSet when computing the power set? [Default OFF]
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'multiset|m=i' => \$multiset,
) or die usage();

# Parameter setups
$multiset = ( $multiset == 1 )? 1 : 0;

##################################################################################
# Read the input data file, expecting a tabular matrix with headers and columns
my $fh = *STDIN;
my $succin = open(SET, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *SET if ( $succin ); 

# Open the output filehand
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Operate on Set A line-by-line
# Woe to ye who include column or row names in your Sets,
#   those names will end up in the union as elements.
my %SetA;
while ( <$fh> )		{
	chomp $_;
	$SetA{$_}++;
}
close $fh if ( $succin );


# Compute the power set with List::Util reduce and a powerset subroutine from 
my @powerset;
if ( $multiset == 1 )	{
	my @bag;
	foreach my $element ( keys %SetA )	{
		push @bag, $element foreach ( 0 .. $SetA{$element} );
	}
	@powerset = powerset( @bag );
}
else 	{
	@powerset = powerset( keys %SetA );
}

#print join(", ", @powerset), "\n";

# Print the power set elements
foreach ( @powerset )	{
	print $fhout "(", join(",", @{$_}), ")\n";
}
close $fhout if ( $succout );
exit;

############################## SUBROUTINES #######################################

# The subroutine comes courtesy of Rosetta code: https://rosettacode.org/wiki/Power_set
# Thanks nameless contributor!
sub powerset {
    @{( reduce { [@$a, map([@$_, $b], @$a)] } [[]], @_ )};
}