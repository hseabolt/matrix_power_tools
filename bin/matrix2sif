#!/usr/bin/perl

# matrix2sif.pl
# Transforms a TAB matrix into a graph network in SIF format


# matrix2sif.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Converts a graph adjacency matrix into a network file in SIF format.

# Note: The resulting output SIF file allows self-edges (loops) and undirected edges are included as two directional edges.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# Required input parameters
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;

sub usage {
	my $usage = "matrix2sif.pl v0.1.0\n
	PURPOSE: Converts a graph adjacency matrix into a network file in SIF format.\n
			**Note**: The resulting output SIF file allows self-edges (loops) and undirected edges are included as two directional edges.
	
	USAGE:	matrix2sif.pl -i matrix.tab [options] -o graph.sif
	-i		input graph adjacency matrix
	-o 		output file name
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )

	\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

##################################################################################
# Read the adjacency matrix
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Operate on the incoming adjacency matrix
# Named vertices are required for the output SIF format, so we must define row names.
# In the weeds note: this program does not check if you have given it a square adjacency matrix.
my @P;
while ( <$fh> )		{
	chomp $_;
	my @row = split("$sep", $_);
	
	# Set column names
	if ( $cns == 1 && $. == 1 )		{
		@colnames = split("$sep", $_);
		next;
	}
	elsif ( $cns == 0 && $. == 1 ) 	{
		if ( $rns == 1 )	{	@colnames = "V$_" foreach ( 1 .. scalar @row - 1 );		}
		else				{	@colnames = "V$_" foreach ( 1 .. scalar @row     );		}
	}
	
	# Set rownames
	my $rowname = ( $rns == 1 )? shift @row : ( $cns == 1 )? "V" . ($. - 1) : "V" . $. ;
	print $fhout "$rowname\n";
	for ( my $i=0; $i < scalar @row; $i++ )		{
		print $fhout join("$sep", $rowname, $row[$i], $colnames[$i]), "\n" if ( $row[$i] != 0 );
	}
}
close $fh if ( $succin );
close $fhout if ( $succout );

exit;
