#!/usr/bin/perl

# bootstrap.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# From an input numeric data matrix, randomly resamples some proportion of the data with replacement and outputs the resampled matrix.
# Default behavior is to consider each row in the incoming data matrix as an independent variable and each column as a "treatment" group over the independent variable.
# Thus, we randomly resample data FOR EACH ROW in order to maintain the same relationships amongst the rows.


##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $method;

sub usage {
	my $usage = "bootstrap.pl v0.1.0\n
	PURPOSE: From an input numeric data matrix, randomly resamples some proportion of the data with replacement and outputs the resampled matrix.
			Default behavior is to consider each row in the incoming data matrix as an independent variable and each column as a \"treatment\" group over the independent variable.
			Thus, we randomly resample data FOR EACH ROW in order to maintain the same relationships amongst the rows.
			Can also resample row vectors with replacement, or treat the entire matrix as a single long vector for cumulative resampling.

	\n
	USAGE:	bootstrap.pl v0.1.0 -i data.tab -o bootstrap.tab
	-i		input numeric data matrix
	-o 		output file name 
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
	-m 		STR; domain to resample data (either row [Default], vector, or cumulative).
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'method|m=s' => \$method,
) or die usage();

# Parameter setups
$cns = ( $cns == 0 )? 0 : 1;
$rns = ( $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

# Set the method
my %methods = ( "row" => 1, "cumulative" => 1, "vector" => 1 );
$method = ( $method && exists $methods{$method} )? $method : "row";

##################################################################################
# Read the first input data file
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

##################################################################################
# Operate on the matrix line-by-line (here we are skipping column headers and rownames, if they are marked as being present
my @P;
my $nrows = 0;
my $ncols = 0;
while ( <$fh> )		{
	chomp $_;
	if ( $. == 1 )		{
		my @line1 = split("$sep", $_);
		if ( $cns == 1 )	{
			@colnames = @line1;
			print $fhout "$_\n";
			next;
		}
		else 	{
			if ( $rns == 1 )	{	@colnames = $_ foreach ( 1 .. scalar @line1 - 1 );	}
			else				{	@colnames = $_ foreach ( 1 .. scalar @line1     );	}
		}
	}
	
	my @row = split("$sep", $_);
	my $rowname;
	if ( $rns == 1 )	{
		$rowname = shift @row;
		push @rownames, $rowname;
	}
	elsif ( $rns == 0 )	{
		my $tick = ( $cns == 1 )? $. - 2 : $. - 1;
		push @rownames, "V" . "$tick";
	}
	
	# Compute the descriptive statistics
	if ( $method eq "row" )	{
		if ( $rns == 1 )	{ 	print $fhout join("$sep", $rowname, bootstrap(\@row)), "\n";		}
		else 				{	print $fhout join("$sep", bootstrap(\@row)), "\n";								}
	}
	elsif ( $method eq "vector" )	{
		push @P, \@row;
	}
	else 	{
		push @P, $_ foreach (@row);
	}
	$nrows++;
	$ncols = scalar @row;
}
close $fh if ( $succin );

##################################################################################
# If the user requested the cumulative method
if ( $method eq "cumulative" )	{

	# Compute the resampled bootstrap
	my @boot = bootstrap(\@P);

	# Now, to print everything back out in the same dimensions as the original matrix, 
	# use the $nrows and $ncols dimensions that we calculated earlier\
	for ( my $i=0; $i < $nrows; $i++ )		{
		my @row;
		for ( my $j=0; $j < $ncols; $j++ )	{
			$row[$j] = shift @boot;
		}
		if ( $rns == 1 )	{	print $fhout join("$sep", $rownames[$i], @row), "\n";	}
		else 				{ 	print $fhout join("$sep",  @row), "\n";					}
	}
}
elsif ( $method eq "vector" ) 	{
	
	# Resample the vector of rownames with replacement
	my @boot = bootstrap_indices(\@rownames);
	
	# Reconstruct the output matrix with the row vectors
	for ( my $i=0; $i < scalar @boot; $i++ )	{
		if ( $rns == 1 )	{	print $fhout join("$sep", $rownames[$i], @{$P[ $boot[$i] ] }), "\n";		}
		else 				{ 	print $fhout join("$sep",  @{$P[ $boot[$i] ]}), "\n";					}
	}
}	
close $fhout if ( $succout );

exit;

############################# SUBROUTINES ###########################################

# Each bootstrap samples across the distribution and assumes that each sample can be drawn i.i.d.
sub bootstrap		{
	my ( $sample ) = @_;
	
	# Inflate the passed arg references
	my @sample = @{$sample};

	# Initialize an array to store the resampled data
	my @bootstrap;
	for ( my $i=0; $i < scalar @sample; $i++ )	{
		$bootstrap[$i] = 0;
	}
	
	# Sample from the weighted distribution (with replacement) we passed into the subroutine
	my $total = sum( @sample );
	my $current_sum = 0;
	while ( $current_sum < $total )	{
		my $rand = rand($total);
		my $chosen = 0;
		my $limit = $sample[$chosen];
		while ( $rand >= $limit )	{
			$chosen++;
			$limit += $sample[$chosen];
		}
		$bootstrap[$chosen]++;
		$current_sum++;
	}
	return @bootstrap;
}

# Computes a sum
sub sum		{
	my ( @list ) = @_;
	my $sum = 0;
	$sum += $_ foreach ( @list );
	return $sum;
}

# Each bootstrap samples across the distribution and assumes that each sample can be drawn i.i.d.
sub bootstrap_indices		{
	my ( $sample ) = @_;
	
	# Inflate the passed arg references
	my @sample = @{$sample};

	# Initialize an array to store the resampled data
	my @bootstrap;
	
	# Sample from the weighted distribution (with replacement) we passed into the subroutine
	while ( scalar @bootstrap < scalar @sample )	{
		my $rand = int(rand(scalar @sample));
		push @bootstrap, $rand;
	}
	return @bootstrap;
}