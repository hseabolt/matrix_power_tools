#!/usr/bin/perl

# permutationMatrix.pl v0.1.0
# Author: MH Seabolt

# SYNOPSIS:
# Generates a Permutation Matrix of a given size.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $rns;
my $sep;

sub usage {
	my $usage = "permutationMatrix.pl\n
	PURPOSE: Generates an Permutation Matrix of a given size.
	\n
	USAGE:	permutationMatrix.pl -r 3 -c 4 -o matrix.tab
	-n 		INT; number of rows and columns [ Default: 1 ]
	-o 		output file name
	-s 		STR; input data separator ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'out|o=s' => \$output,
			'size|n=i' => \$rns,
			'sep|s=s' => \$sep,
) or die usage();

# Parameter setups
$rns = ( $rns && $rns >= 1)? $rns : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

# Set output filehandles
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;			}
else				{	$fhout = *STDOUT;		}

# Generate the new matrix
my @M = ();
for ( my $i=0; $i < $rns; $i++ )	{
	for ( my $j=0; $j < $rns; $j++ )	{
		$M[$i]->[$j] = ( $i == $j )? 1 : 0;
	}
}

# Permute the rows and print
my %Printed = ();
while ( scalar keys %Printed < scalar @M )		{
	my $index = int(rand(scalar @M));
	if ( not exists $Printed{$index} )	{
		print $fhout join("$sep", @{$M[$index]}), "\n";
		$Printed{$index} = 1;
	}
}
exit;

























