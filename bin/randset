#!/usr/bin/perl

# randset.pl v0.1.0
# Author: MH Seabolt

# SYNOPSIS:
# Generates an random Set of integers of size *n*.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $output = "--";
my $n = 10;
my $bag = 0;
my $upper_bound = 10000;
my $lower_bound = 0;
my $letters = 0;

sub usage {
	my $usage = "randset.pl\n
	PURPOSE:  Generates an random Set of integers of size *n*.
	\n
	USAGE:	randset.pl -r 3 -c 4 -o matrix.tab
	-n 		INT; number of items in the Set [ Default: 10 ]
	-o 		output file name
	
	=== OPTIONAL EXTRAS ===
	-b 		INT flag; generate a random Bag (Multiset), where multiple elements of the same type can exist in the Set. [ Default: OFF ]
	-u 		INT; upper bound for the random generator.  [ Default: 10,000 ]
	-l 		INT; lower bound for the random generator.  [ Default: 0 ]
	-z 		INT flag; use letters instead of integers to generate the Set? [ Default: OFF ]
			If using letters, overwrites upper and lower bound options for integers.
	
\n";
	print $usage;
}

GetOptions(	'out|o=s' => \$output,
			'elements|n=i' => \$n,
			'bag|b=i' => \$bag,
			'upper|u=i' => \$upper_bound,
			'lower|l=s' => \$lower_bound,
			'letters|z=i' => \$letters,
) or die usage();

# Parameter setups
$n = ( $n > 0 )? $n : 10;
$bag = ( $bag != 0 )? 1 : 0;
$letters = ( $letters != 0 )? 1 : 0;
$upper_bound = ( $upper_bound > 0 )? $upper_bound : 10000;
$lower_bound = ( $lower_bound != 0 )? $lower_bound : 0;

# List of available letters if we are using that option
my @Letters = qw(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z);

# Set output filehandles
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;			}
else				{	$fhout = *STDOUT;		}

# Generate the new Set.  
# By default, the Set is over the positive integers up to 10,000
my %S = ();
my $x = int(1 + (log($n) / log(26)));				# An exponent for the $letters option to determine how many letters we need
while ( sum(values %S) <= $n )		{
	
	# Generate a random element
	my $rand;
	if ( $letters == 1 )	{
		$rand = $Letters[ int(rand(26)) ];				
		
		# If we need to generate some overflow options for letters
		while ( length $rand < $x )		{
			$rand .= $Letters[ int(rand(26)) ];
		}
	}
	else 	{
		$rand = int(rand(1+$upper_bound-abs($lower_bound)) + ($lower_bound));		# +1 added to make the upper bound inclusive
	}
	
	# Add the new element to the growing Set
	if ( $bag == 1 )	{	$S{$rand}++;	}
	else 				{	$S{$rand} = 1;	} 
}

# Print the set
foreach my $key ( keys %S )		{
	foreach ( 1 .. $S{$key} )	{
		print $fhout "$key\n";
	}
}

exit;

#################################### SUBROUTINES ##################################

sub sum		{
	my ( @list ) = @_;
	my $sum = 0;
	$sum += $_ foreach ( @list );
	return $sum;
}























