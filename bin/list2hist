#!/usr/bin/perl

# list2hist v0.1.0
# Author: MH Seabolt

# SYNOPSIS:
# Calcalutes a histogram of frequencies (occurences) from an input list of data

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# Required input parameters
my $input = "--";
my $output = "--";
my $h;

# General variable declarations
sub usage {
	my $usage = "list2hist.pl\n
	PURPOSE: 	Calcalutes a histogram of frequencies (occurences) from an input list of data.\n
	
	USAGE:	list2hist.pl -i data.list -o counts.tab
	-i			Input list of data, one entry per line
	-o			output file name
	-help			print this message and exit
	\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input,
			'out|o=s' => \$output,
			'help|h' => \$h,
);
if ( $h )	{	die usage();	}

# Initialize an output filehandle -- this will work for either workflow used in the following code
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Read the data
my @data;
if ( $input ne "--" && -e $input )	{
	open DATA, "$input" or die "Something is wrong with your input data file.  $!\n";
		@data = <DATA>;
	close DATA;
}
else		{
	@data = <STDIN>;
}

# Tabulate the data into a frequency count histogram
my %Hist = ();
foreach my $record ( @data )	{
	chomp $record;
	$Hist{$record}++;
}

# Print out the tabulated data
foreach my $key ( sort keys %Hist )	{
	print $fhout "$key\t$Hist{$key}\n";
}

exit;