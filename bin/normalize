#!/usr/bin/perl

# normalize.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Normalizes an input numeric data matrix between two values (inclusive).

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $lower = 0;
my $upper = 1;

sub usage {
	my $usage = "normalize.pl v0.1.0\n
	PURPOSE: Normalizes an input numeric data matrix between two values (inclusive).

	\n
	USAGE:	normalize.pl v0.1.0 -P data.tab -o normalized.tab
	-i		input numeric data matrix.
	-l 		NUMBER; lower bound for normalization ( Default: 0 )
	-u 		NUMBER; upper bound for normalization ( Default: 1 )
	-o 		output file name ( do not include extensions! )
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'lower|l=f' => \$lower,
			'upper|u=f' => \$upper,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";
( $upper, $lower ) = ( $lower, $upper ) if ( $lower > $upper );

##################################################################################
# Read the first input data file
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Operate on the matrix line-by-line (here we are skipping column headers and rownames, if they are marked as being present
my @P;
my @mins;
my @maxs;
while ( <$fh> )		{
	chomp $_;
	if ( $cns == 1 && $. == 1 )		{
		@colnames = split("$sep", $_);
		next;
	}
	my @row = split("$sep", $_);
	if ( $rns == 1 )	{
		my $rowname = shift @row;
		push @rownames, $rowname;
	}
	push @P, \@row;
	push @mins, min(@row);
	push @maxs, max(@row);
}
close $fh if ( $succin );

# Get the global min and max values, which will be our upper and lower bounds
my $global_min = min(@mins);
my $global_max = max(@maxs);
my $range = $global_max - $global_min;

##################################################################################
# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}
print $fhout join("$sep", @colnames), "\n" if ( $cns == 1 );

# Loop over the matrix and compute the normalization
for ( my $i=0; $i < scalar @P; $i++ )	{
	my @row;
	for ( my $j=0; $j < scalar @{$P[0]}; $j++ )		{
		$row[$j] = ($upper - $lower ) * (($P[$i]->[$j] - $global_min) / $range) + $lower;
	}
	if ( $rns == 1 )	{	print $fhout join("$sep", $rownames[$i], @row),"\n";		}
	else 				{ 	print $fhout join("$sep", @row),"\n";					}
}
close $fhout if ( $succout );
exit;

################################## SUBROUTINES ###########################################

# Calculates the maximum of a list
sub max		{
	my ( @list ) = @_;
	my $max = $list[0];
	foreach ( @list )	{
		$max = $_ if ( $_ > $max );
	}
	return $max;
}


# Calculates the minimum of a list
sub min		{
	my ( @list ) = @_;
	my $min = $list[0];
	foreach ( @list )	{
		$min = $_ if ( $_ < $min );
	}
	return $min;
}