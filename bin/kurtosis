#!/usr/bin/perl

# kurtosis.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Calculates the kurtosis "tailed-ness" for a distribution given by an input numeric data matrix, either by row (default) or cumulatively.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $method;

sub usage {
	my $usage = "kurtosis.pl v0.1.0\n
	PURPOSE: Calculates the kurtosis \"tailed-ness\" for a distribution given by an input numeric data matrix, either by row (default) or cumulatively.

	\n
	USAGE:	kurtosis.pl v0.1.0 -i data.tab -o kurtosis.tab
	-i		input numeric data matrix
	-o 		output file name 
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
	-m 		STR; method to calculate statistics (either row [Default] or cumulative).
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'method|m=s' => \$method,
) or die usage();

# Parameter setups
$cns = ( $cns == 0 )? 0 : 1;
$rns = ( $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";
$method = ( $method && $method =~ /(?im)cum/ )? "cumulative" : "row";

##################################################################################
# Read the first input data file
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Print the appropriate header(s) if we are using them
if ( $cns == 1 )	{	print $fhout "kurtosis\n";		}

##################################################################################
# Operate on the matrix line-by-line (here we are skipping column headers and rownames, if they are marked as being present
my @P;
while ( <$fh> )		{
	chomp $_;
	if ( $cns == 1 && $. == 1 )		{
		@colnames = split("$sep", $_);
		next;
	}
	my @row = split("$sep", $_);
	my $rowname;
	if ( $rns == 1 )	{
		$rowname = shift @row;
		push @rownames, $rowname;
	}

	# Compute the descriptive statistics
	if ( $method ne "cumulative" )	{
		if ( $rns == 1 )	{ 	print $fhout join("$sep", $rowname, kurtosis(@row)), "\n";		}
		else 				{	print $fhout kurtosis(@row), "\n";								}
	}
	else 	{
		push @P, $_ foreach (@row);
	}
}
close $fh if ( $succin );

##################################################################################
# If the user requested the cumulative method
if ( $method eq "cumulative" )	{
	if ( $rns == 1 )	{ 	print $fhout join("$sep", "Cumulative", kurtosis(@P)), "\n";		}
	else 				{	print $fhout kurtosis(@P), "\n";								}
}
close $fhout if ( $succout );

exit;

############################# SUBROUTINES ###########################################

# Arithmetic Mean
sub mean	{ 	
	my ( @data ) = @_;
	return "<NA>" if ( scalar @data == 0 );
	my $mean = 0;
	$mean += $_ foreach ( @data );
	return $mean / scalar @data;
}

# The variance of a sample == the standard deviation squared (s^2)
sub variance	{
	my ( @data ) = @_;
	return "0" if ( scalar @data == 1 );
	my $mean = mean(@data);
	my $var = 0;
	foreach ( @data ) {	$var += ($_ - $mean)**2;      }
	$var /= scalar @data;
	return $var;
}

# Kurtosis measures the "tailed-ness" of a data set, and is the ratio of the 4th moment and the second moment squared.
sub kurtosis	{
	my ( @data ) = @_;
	my $mean = mean(@data);
	return "<NA>" if ( $mean == 0 || $mean eq "<NA>" );
	my $kurtosis;
	foreach ( @data )	{	$kurtosis += ($_ - $mean) ** 4;		}
	$kurtosis = ( $kurtosis / scalar @data );
	my $variance = variance( @data );
	( $variance == 0 )? "<NA>" : return $kurtosis / variance(@data) ** 2;
}