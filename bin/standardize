#!/usr/bin/perl

# standardize.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Standardizes an input numeric data matrix to their Z-scores or alternatively, their t-scores.
# Both Z-scores and t-scores rely on a known population mean for their respective computation, which we
# estimate from the data along with standard deviation.  Either option can be explicitly given using the 
# -mean or -stdev options if you do not want to estimate them from the data.
#
# Note: if you have less than 30 samples or are not confident that the population standard deviation
# cannot be acceptably estimated from the input data, use the t-scores option. 

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $score = "z";
my $mean;
my $stdev;

sub usage {
	my $usage = "standardize.pl v0.1.0\n
	PURPOSE: Standardizes an input numeric data matrix to their Z-scores or alternatively, their t-scores.
	Both Z-scores and t-scores rely on a known population mean for their respective computation, which we
	estimate from the data along with standard deviation.  Either option can be explicitly given using the 
	-mean or -stdev options if you do not want to estimate them from the data.
	
	Note: if you have less than 30 samples or are not confident that the population standard deviation
	cannot be acceptably estimated from the input data, use the t-scores option.

	\n
	USAGE:	standardize.pl v0.1.0 -P data.tab -o standardized.tab
	-i		input numeric data matrix.
	-o 		output file name ( do not include extensions! )
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator ( Default: tab )
	-q 		STR; compute z-score or t-scores? ( Default: z )
	
	=== OPTIONAL EXTRAS ===
	-mean 	FLT; population mean if you want to use an explicit value rather than estimate it from the data
	-stdev  FLT; population standard deviation, if known, and you dont want to estimate it from the data
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'score|q=s' => \$score,
			'mean=f' => \$mean,
			'stdev=f' => \$stdev,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";
$score = ( $score =~ /(?im)^t/ )? "t" : "z";

##################################################################################
# Read the first input data file
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Initialize a vector for rownames
my @rownames;
my @colnames;

# Operate on the matrix line-by-line (here we are skipping column headers and rownames, if they are marked as being present
my @P;
my @list;
while ( <$fh> )		{
	chomp $_;
	if ( $cns == 1 && $. == 1 )		{
		@colnames = split("$sep", $_);
		next;
	}
	my @row = split("$sep", $_);
	if ( $rns == 1 )	{
		my $rowname = shift @row;
		push @rownames, $rowname;
	}
	push @P, \@row;
	push @list, $_ foreach (@row);
}
close $fh if ( $succin );

# Get the mean, stdev, and size of the data if we want to estimate them.
my ( $m, $s ) = stdev( @list );
$mean = ( defined $mean )? $mean : $m;
$stdev = ( defined $stdev )? $stdev : $s;
my $n = scalar @list;

##################################################################################
# Open the output filehandle
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}
print $fhout join("$sep", @colnames), "\n" if ( $cns == 1 );

# Loop over the matrix and compute the normalization
for ( my $i=0; $i < scalar @P; $i++ )	{
	my @row;
	for ( my $j=0; $j < scalar @{$P[0]}; $j++ )		{
		if ( $score eq "z" )	{	
			$row[$j] = ($P[$i]->[$j] - $mean) / $stdev;			# Z-score
		}				
		else 	{	
			$row[$j] = ($P[$i]->[$j] - $mean) / ( $stdev / sqrt($n) );		# T-score
		}
	}
	if ( $rns == 1 )	{	print $fhout join("$sep", $rownames[$i], @row),"\n";		}
	else 				{ 	print $fhout join("$sep", @row),"\n";					}
}
close $fhout if ( $succout );
exit;

################################## SUBROUTINES ###########################################

# Calculates the sum of a list
sub sum		{
	my ( @list ) = @_;
	my $sum = 0;
	$sum += $_ foreach ( @list );
	return $sum;
}

# Calculate the mean of a list
sub mean	{
	return sum(@_)/@_;
}

sub stdev	{
	my ( @data ) = @_;
        if ( @data == 1 ) {
                return 0;
        }
        my $mean = mean(@data);
        my $std = 0;
        foreach ( @data ) {
                $std += ( $_ - $mean ) ** 2;
        }
        $std = ( $std / scalar @data ) ** 0.5;
        return ($mean, $std);
}