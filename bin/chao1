#!/usr/bin/perl

# chao1.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-21-2021

# SYNOPSIS
# Calculates the Chao1 or Chao2 index of species diversity (a measure of alpha diversity) estimated from species observed only once or twice.
# Requires an input OTU abundance table with samples as columns and OTUs as rows.

##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use List::Util qw(min max);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns = 1;
my $rns = 1;
my $sep;
my $method;
my $which_chao;

sub usage {
	my $usage = "chao1.pl v0.1.0\n
	PURPOSE: Calculates the Chao1 index of species diversity (a measure of alpha diversity) estimated from species observed only once or twice.
			Requires an input OTU abundance table with samples as rows and OTUs as columns, cells contain frequency/count data.
			
	\n
	USAGE:	chao1.pl v0.1.0 -i otu.abundance.tab -o chao1.tab
	-i		input OTU abudance matrix
	-o 		output file name
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
	-m 		STR; method to calculate the Chao1 index (either row [Default] or cumulative).
	-e 		STR; estimator algorithm to use ( either chao1 [Default] or chao2 ). 
			Chao2 estimation implies -m cumulative.
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
			'method|m=s' => \$method,
			'estimate|e=s' => \$which_chao,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";
$which_chao = ( $which_chao && $which_chao =~ /2/ )? "chao2" : "chao1";
if ( $which_chao eq "chao2" )	{	$method = "cumulative"; 	}
else 							{	$method = ( $method && $method =~ /cum/ )? "cumulative" : "row";	}

##################################################################################
# Read the input data file, expecting a tabular matrix with headers and columns
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Open the output filehand
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}
if ( $which_chao eq "chao2" )	{	print $fhout "Sample\tObs\tChao2\tChao2_LB\tChao2_UL\n";	}
else 							{	print $fhout "Sample\tObs\tChao1\tChao1_LB\tChao1_UL\n";	}	

# Operate on the matrix line-by-line
my @cumulative;
while ( <$fh> )		{
	chomp $_;
	
	# If we have column headers, just print our singple header
	next if ( $cns == 1 && $. == 1 );
	
	
	# Now operate on the rows
	my @row = split("$sep", $_);
	my $rowname = shift @row if ( $rns == 1 );
	
	if ( $method ne "cumulative" )	{
		if ( $rns == 1 )	{	print $fhout "$rowname", "$sep", join("$sep", chao1( @row )), "\n";	}
		else 				{	print $fhout join("$sep", chao1( @row )), "\n";						}
	}
	else 	{
		for ( my $i=0; $i < scalar @row; $i++ )	{
			if ( $which_chao eq "chao2" )	{	$cumulative[$i]++ if ( $row[$i] > 0 );	}
			else 							{	push @cumulative, $row[$i];				}
		}
	}
}
close $fh if ( $succin );

# If we need the cumulative Chao1 index:
if ( $method eq "cumulative" )	{
	if ( $rns == 1 )	{	print $fhout uc $which_chao, "$sep", join("$sep", chao1( @cumulative )), "\n";	}
	else 				{	print $fhout chao1( @cumulative ), "\n";										}
}
close $fhout if ( $succout );
exit;

################################ SUBROUTINES ######################################

# Calculates the Chao1 and Chao2 estimations plus variance and confidence intervals. 
# Accepts an array of count data to operate with.
sub chao1		{
	my ( @samples ) = @_;
	my $singles = 0;
	my $doubles = 0;
	my $total_observed = 0;
	
	for ( my $i=0; $i < scalar @samples; $i++ )	{
		$singles++ if ( $samples[$i] == 1 );
		$doubles++ if ( $samples[$i] == 2 );
		$total_observed++ if ( $samples[$i] > 0 );
	}
	if ( $total_observed > 0 && $singles > 0 && $doubles > 0 )		{
		my $mean = $singles / $doubles;
		my $chao1 = $total_observed + (($singles**2) / (2*$doubles));
		my $variance = ( $doubles * ((($mean**4)/4) + ($mean**3) + (($mean**2)/2)) );
		my $CI = exp(1.96 * sqrt(log(1 + $variance/(($chao1 - $total_observed)**2))));
		my $chao_lowerCI = max( $total_observed + ($chao1 - $total_observed)/$CI, $total_observed );
		my $chao_upperCI = $total_observed + $CI*($chao1 - $total_observed);
		return ( $total_observed, $chao1, sprintf("%3.4f", $chao_lowerCI), sprintf("%3.4f", $chao_upperCI) );
	}
	else 	{
		return ( $total_observed, $total_observed, 0, 0 );
	}
}