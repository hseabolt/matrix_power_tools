#!/usr/bin/perl

# phyletic.pl v0.1.0
# Author: MH Seabolt
# Last updated: 8-18-2021

# SYNOPSIS
# Converts an NxM data matrix into an equivalent NxM phyletic (binary) matrix.
# Intended to transform non-zero numerical data into binary 'present' and zero values as 'absent'.
# WARNING: Ignores categorical data!!!!


##################################################################################
# The MIT License
#
# Copyright (c) 2021 Matthew H. Seabolt
#
# Permission is hereby granted, free of charge, 
# to any person obtaining a copy of this software and 
# associated documentation files (the "Software"), to 
# deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom 
# the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice 
# shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##################################################################################

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

# GetOpts Variable declarations
my $input = "--";
my $output = "--";
my $cns;
my $rns;
my $sep;

sub usage {
	my $usage = "phyletic.pl\n
	PURPOSE: Converts an NxM data (numerical) matrix into an equivalent NxM phyletic (binary) matrix.
			 Intended to transform non-zero numerical data into binary 'present' and zero values as 'absent'.
			*** WARNING: Ignores categorical data!!!! ***
	\n
	USAGE:	phyletic.pl -i matrix.tab -o phyletic.tab
	-i		input matrix file in TAB format.
	-o 		output file name ( do not include extensions! )
	-c 		INT flag; matrix contains column headers? ( Default: ON )
	-r 		INT flag; matrix contains row names? ( Default: ON )
	-s 		STR; input data separator. ( Default: tab )
\n";
	print $usage;
}

GetOptions(	'input|i=s' => \$input, 
			'out|o=s' => \$output,
			'colnames|c=i' => \$cns,
			'rownames|r=i' => \$rns,
			'sep|s=s' => \$sep,
) or die usage();

# Parameter setups
$cns = ( $cns && $cns == 0 )? 0 : 1;
$rns = ( $rns && $rns == 0 )? 0 : 1;
$sep = ( $sep && $sep ne "\t" )? $sep : "\t";

##################################################################################
# Read the input data file, expecting a tabular matrix with headers and columns
my $fh = *STDIN;
my $succin = open(MATRIX, "<", "$input") if ( $input ne "--" && -e $input );
$fh = *MATRIX if ( $succin ); 

# Open the output filehand
my $succout = open( OUT, ">", "$output" ) if $output ne "--";
my $fhout;
if ( $succout )		{	$fhout = *OUT;		}
else				{	$fhout = *STDOUT;	}

# Operate on the matrix line-by-line
while ( <$fh> )		{
	chomp $_;
	
	# If we have column headers, go ahead and print those
	print $fhout "$_\n" if ( $cns == 1 && $. == 1 );
	
	# Now operate on the rows
	my @row = split("$sep", $_);
	my $rowname = shift @row if ( $rns == 1 );
	for ( my $i=0; $i < scalar @row; $i++ )	{
		next if ( $row[$i] =~ /[A-Za-z]/ );
		$row[$i] = ( $row[$i] == 0 )? 0 : 1; 
	}
	if ( $rns == 1 )	{	print $fhout "$rowname", "$sep", join("$sep", @row), "\n";	}
	else 				{	print $fhout join("$sep", @row), "\n";						}
}
close $fhout if ( $succout );
close $fh if ( $succin );

exit;





